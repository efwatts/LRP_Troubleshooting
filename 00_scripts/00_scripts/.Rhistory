BiocManager::install("edgeR", update = FALSE, ask = FALSE)
library(edgeR)
library(ggplot2)
library(readr)
setwd("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary")
counts <- read.csv("/Volumes/sheynkman/projects/LRP_Mohi_project/03_filter_sqanti/MDS_filtered_raw_counts.tsv", header = TRUE, check.names = FALSE)
# Corrected group assignment to match actual sample order
# Biosample1 = V334_WT, Biosample2 = A258_Q157R, Biosample3 = A310_WT,
# Biosample4 = V335_WT, Biosample5 = X504_Q157R, Biosample6 = A309_Q157R
group <- factor(c("WT", "Q157R", "WT", "WT", "Q157R", "Q157R"))
sample_names <- c("V334_WT", "A258_Q157R", "A310_WT", "V335_WT", "X504_Q157R", "A309_Q157R")
dge_raw <- DGEList(counts = counts, group = group)
colnames(dge_raw$counts) <- sample_names
dge_raw$samples$samples <- sample_names
boxplot(dge_raw$counts, main = "Boxplot of Raw Counts", las = 2, col = as.numeric(group))
plotMDS(dge_raw, col = as.numeric(group), main = "MDS Plot for Raw Counts")
plotMD(dge_raw, col = as.numeric(group), main = "MD Plot for Raw Counts")
abline(h = 0, col = "red", lty = 2, lwd = 2)
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))
for (i in 1:ncol(dge_raw$counts)) {
plotMD(dge_raw, column = i, main = paste("MD Plot for", sample_names[i]))
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
par(mfrow = c(1, 1)) # Reset plotting area to single panel
keep <- filterByExpr(dge_raw)
table(keep)
dge <- dge_raw[keep, , keep.lib.sizes = FALSE]
dge <- calcNormFactors(dge, method = "TMM")
boxplot(dge$counts, main = "Boxplot of Normalized Counts", las = 2, col = as.numeric(group))
plotMDS(dge, col = as.numeric(group), main = "MDS Plot for Normalized Counts")
plotMD(dge, col = as.numeric(group), main = "MD Plot for Normalized Counts")
abline(h = 0, col = "red", lty = 2, lwd = 2)
design <- model.matrix(~ group)
rownames(design) <- colnames(dge)
dge_disp <- estimateDisp(dge, design)
dge_disp$common.dispersion
plotBCV(dge_disp)
fit <- glmQLFit(dge_disp, design)
plotQLDisp(fit)
result <- glmQLFTest(fit, coef = 2)
topTags(result)
# Get results with FDR already calculated
deg_results_full <- topTags(result, n = Inf)$table
sum(deg_results_full$FDR < 0.05)
# For plotting and summary, use the result object directly
qlf <- result  # Use the same result object
top <- rownames(topTags(qlf))
cpm(dge_disp)[top, ]
summary(decideTests(qlf))
plotMD(qlf)
abline(h = c(-1, 1), col = "blue")
deg_results <- topTags(result, n = Inf)$table
write.table(deg_results,
file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/transcript_DEG_results.txt",
sep = "\t", quote = FALSE, row.names = TRUE)
# Raw and normalized CPM Matrices
write.table(cpm(dge_raw), file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/raw_CPM_matrix.txt", sep = "\t", quote = FALSE)
write.table(cpm(dge), file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/normalized_CPM_matrix.txt", sep = "\t", quote = FALSE)
# List of filtered-in transcripts
write.table(rownames(dge), file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/filtered_transcripts.txt", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Design matrix to keep record of the model used
write.table(design, file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/design_matrix.txt", sep = "\t", quote = FALSE, row.names = TRUE, col.names = NA)
# Top genes table
top_genes <- topTags(qlf, n = 50)$table
write.table(top_genes, file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/top_transcripts.txt", sep = "\t", quote = FALSE, row.names = TRUE)
# Save dipersion plots (BCV and QL)
png("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/BCV_plot.png", width = 800, height = 600)
plotBCV(dge_disp)
dev.off()
png("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/QLDisp_plot.png", width = 800, height = 600)
plotQLDisp(fit)
dev.off()
# MDS plot (normalized)
png("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/MDS_plot.png", width = 800, height = 600)
plotMDS(dge, col = as.numeric(group), main = "MDS Plot for Normalized Counts")
dev.off()
deg_results$Gene <- rownames(deg_results)
ggplot(deg_results, aes(x = logFC, y = -log10(PValue))) +
geom_point(aes(color = FDR < 0.05)) +
scale_color_manual(values = c("black", "red")) +
theme_minimal() +
labs(title = "Volcano Plot", x = "Log2 Fold Change", y = "-Log10 P-value")
ggsave("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/transcript_volcano_plot.png", width = 6, height = 6, dpi = 300)
# Check the FDR values
deg_results <- topTags(result, n = Inf)$table
head(deg_results)
summary(deg_results$FDR)
length(unique(deg_results$FDR))  # Should show many unique values
# Additional checks for your edgeR analysis
# 1. Check how many genes would be significant at different FDR thresholds
print("Number of genes at different FDR thresholds:")
print(paste("FDR < 0.05:", sum(deg_results$FDR < 0.05)))
print(paste("FDR < 0.1:", sum(deg_results$FDR < 0.1)))
print(paste("FDR < 0.2:", sum(deg_results$FDR < 0.2)))
print(paste("FDR < 0.3:", sum(deg_results$FDR < 0.3)))
# 2. Look at the raw p-values
print("Number of genes at different raw p-value thresholds:")
print(paste("Raw p < 0.001:", sum(deg_results$PValue < 0.001)))
print(paste("Raw p < 0.01:", sum(deg_results$PValue < 0.01)))
print(paste("Raw p < 0.05:", sum(deg_results$PValue < 0.05)))
# 3. Check the fold changes of top genes
print("Fold changes of top 20 genes by p-value:")
top_by_pval <- deg_results[order(deg_results$PValue), ][1:20, ]
print(top_by_pval[, c("logFC", "PValue", "FDR")])
# 4. Try exact test as alternative (often more powerful for simple comparisons)
print("Trying exact test:")
exact_result <- exactTest(dge_disp, pair = c("Q157R", "WT"))
exact_deg <- topTags(exact_result, n = Inf)$table
print(paste("Exact test - genes with FDR < 0.05:", sum(exact_deg$FDR < 0.05)))
print(paste("Exact test - genes with FDR < 0.1:", sum(exact_deg$FDR < 0.1)))
print("Top 10 genes from exact test:")
print(head(exact_deg, 10))
# 5. Check if the issue is multiple testing burden
print("Total number of genes tested:")
print(nrow(deg_results))
print("This affects FDR correction - more genes tested = more stringent FDR")
# 6. Look at MDS plot to see if samples cluster by group
plotMDS(dge, col = as.numeric(group), labels = group)
# Additional checks for your edgeR analysis
# 1. Check how many genes would be significant at different FDR thresholds
print("Number of genes at different FDR thresholds:")
print(paste("FDR < 0.05:", sum(deg_results$FDR < 0.05)))
print(paste("FDR < 0.1:", sum(deg_results$FDR < 0.1)))
print(paste("FDR < 0.2:", sum(deg_results$FDR < 0.2)))
print(paste("FDR < 0.3:", sum(deg_results$FDR < 0.3)))
# 2. Look at the raw p-values
print("Number of genes at different raw p-value thresholds:")
print(paste("Raw p < 0.001:", sum(deg_results$PValue < 0.001)))
print(paste("Raw p < 0.01:", sum(deg_results$PValue < 0.01)))
print(paste("Raw p < 0.05:", sum(deg_results$PValue < 0.05)))
# 3. Check the fold changes of top genes
print("Fold changes of top 20 genes by p-value:")
top_by_pval <- deg_results[order(deg_results$PValue), ][1:20, ]
print(top_by_pval[, c("logFC", "PValue", "FDR")])
# 4. Try exact test as alternative (often more powerful for simple comparisons)
print("Trying exact test:")
exact_result <- exactTest(dge_disp, pair = c("Q157R", "WT"))
exact_deg <- topTags(exact_result, n = Inf)$table
print(paste("Exact test - genes with FDR < 0.05:", sum(exact_deg$FDR < 0.05)))
print(paste("Exact test - genes with FDR < 0.1:", sum(exact_deg$FDR < 0.1)))
print("Top 10 genes from exact test:")
print(head(exact_deg, 10))
# 5. Check if the issue is multiple testing burden
print("Total number of genes tested:")
print(nrow(deg_results))
print("This affects FDR correction - more genes tested = more stringent FDR")
# 6. Look at MDS plot to see if samples cluster by group
plotMDS(dge, col = as.numeric(group), labels = group)
title("MDS Plot - Do samples cluster by group?")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("readr", quietly = TRUE)) install.packages("readr")
BiocManager::install("edgeR", update = FALSE, ask = FALSE)
library(edgeR)
library(ggplot2)
library(readr)
setwd("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary")
counts <- read.csv("/Volumes/sheynkman/projects/LRP_Mohi_project/03_filter_sqanti/MDS_filtered_raw_counts.tsv", header = TRUE, check.names = FALSE)
# Corrected group assignment to match actual sample order
# Biosample1 = V334_WT, Biosample2 = A258_Q157R, Biosample3 = A310_WT,
# Biosample4 = V335_WT, Biosample5 = X504_Q157R, Biosample6 = A309_Q157R
group <- factor(c("WT", "Q157R", "WT", "WT", "Q157R", "Q157R"))
sample_names <- c("V334_WT", "A258_Q157R", "A310_WT", "V335_WT", "X504_Q157R", "A309_Q157R")
dge_raw <- DGEList(counts = counts, group = group)
colnames(dge_raw$counts) <- sample_names
dge_raw$samples$samples <- sample_names
boxplot(dge_raw$counts, main = "Boxplot of Raw Counts", las = 2, col = as.numeric(group))
plotMDS(dge_raw, col = as.numeric(group), main = "MDS Plot for Raw Counts")
plotMD(dge_raw, col = as.numeric(group), main = "MD Plot for Raw Counts")
abline(h = 0, col = "red", lty = 2, lwd = 2)
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))
for (i in 1:ncol(dge_raw$counts)) {
plotMD(dge_raw, column = i, main = paste("MD Plot for", sample_names[i]))
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
par(mfrow = c(1, 1)) # Reset plotting area to single panel
keep <- filterByExpr(dge_raw)
table(keep)
dge <- dge_raw[keep, , keep.lib.sizes = FALSE]
dge <- calcNormFactors(dge, method = "TMM")
boxplot(dge$counts, main = "Boxplot of Normalized Counts", las = 2, col = as.numeric(group))
plotMDS(dge, col = as.numeric(group), main = "MDS Plot for Normalized Counts")
plotMD(dge, col = as.numeric(group), main = "MD Plot for Normalized Counts")
abline(h = 0, col = "red", lty = 2, lwd = 2)
design <- model.matrix(~ group)
rownames(design) <- colnames(dge)
dge_disp <- estimateDisp(dge, design)
dge_disp$common.dispersion
plotBCV(dge_disp)
fit <- glmQLFit(dge_disp, design)
plotQLDisp(fit)
result <- glmQLFTest(fit, coef = 2)
topTags(result)
# Get results with FDR already calculated
deg_results_full <- topTags(result, n = Inf)$table
sum(deg_results_full$FDR < 0.05)
# For plotting and summary, use the result object directly
qlf <- result  # Use the same result object
top <- rownames(topTags(qlf))
cpm(dge_disp)[top, ]
summary(decideTests(qlf))
plotMD(qlf)
abline(h = c(-1, 1), col = "blue")
deg_results <- topTags(result, n = Inf)$table
write.table(deg_results,
file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/transcript_DEG_results.txt",
sep = "\t", quote = FALSE, row.names = TRUE)
# Raw and normalized CPM Matrices
write.table(cpm(dge_raw), file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/raw_CPM_matrix.txt", sep = "\t", quote = FALSE)
write.table(cpm(dge), file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/normalized_CPM_matrix.txt", sep = "\t", quote = FALSE)
# List of filtered-in transcripts
write.table(rownames(dge), file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/filtered_transcripts.txt", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Design matrix to keep record of the model used
write.table(design, file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/design_matrix.txt", sep = "\t", quote = FALSE, row.names = TRUE, col.names = NA)
# Top genes table
top_genes <- topTags(qlf, n = 50)$table
write.table(top_genes, file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/top_transcripts.txt", sep = "\t", quote = FALSE, row.names = TRUE)
# Save dipersion plots (BCV and QL)
png("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/BCV_plot.png", width = 800, height = 600)
plotBCV(dge_disp)
dev.off()
png("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/QLDisp_plot.png", width = 800, height = 600)
plotQLDisp(fit)
dev.off()
# MDS plot (normalized)
png("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/MDS_plot.png", width = 800, height = 600)
plotMDS(dge, col = as.numeric(group), main = "MDS Plot for Normalized Counts")
dev.off()
dge <- estimateCommonDisp(dge)
dge <- estimateTagwiseDisp(dge)
plotBCV(dge)
result <- exactTest(dge)
topTags(result)
# Get results with FDR already calculated
deg_results_full <- topTags(result, n = Inf)$table
sum(deg_results_full$FDR < 0.05)
# For plotting and summary, use the result object directly
qlf <- result  # Use the same result object
top <- rownames(topTags(qlf))
cpm(dge_disp)[top, ]
summary(decideTests(qlf))
plotMD(qlf)
abline(h = c(-1, 1), col = "blue")
deg_results <- topTags(result, n = Inf)$table
write.table(deg_results,
file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/transcript_DEG_results.txt",
sep = "\t", quote = FALSE, row.names = TRUE)
# Raw and normalized CPM Matrices
write.table(cpm(dge_raw), file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/raw_CPM_matrix.txt", sep = "\t", quote = FALSE)
write.table(cpm(dge), file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/normalized_CPM_matrix.txt", sep = "\t", quote = FALSE)
# List of filtered-in transcripts
write.table(rownames(dge), file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/filtered_transcripts.txt", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Design matrix to keep record of the model used
write.table(design, file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/design_matrix.txt", sep = "\t", quote = FALSE, row.names = TRUE, col.names = NA)
# Top genes table
top_genes <- topTags(qlf, n = 50)$table
write.table(top_genes, file = "/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/top_transcripts.txt", sep = "\t", quote = FALSE, row.names = TRUE)
# Save dipersion plots (BCV and QL)
png("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/BCV_plot.png", width = 800, height = 600)
plotBCV(dge_disp)
dev.off()
png("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/QLDisp_plot.png", width = 800, height = 600)
plotQLDisp(fit)
dev.off()
# MDS plot (normalized)
png("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/MDS_plot.png", width = 800, height = 600)
plotMDS(dge, col = as.numeric(group), main = "MDS Plot for Normalized Counts")
dev.off()
deg_results$Gene <- rownames(deg_results)
ggplot(deg_results, aes(x = logFC, y = -log10(PValue))) +
geom_point(aes(color = FDR < 0.05)) +
scale_color_manual(values = c("black", "red")) +
theme_minimal() +
labs(title = "Volcano Plot", x = "Log2 Fold Change", y = "-Log10 P-value")
ggsave("/Volumes/sheynkman/projects/LRP_Mohi_project/19_LRP_summary/edgeR/transcript_volcano_plot.png", width = 6, height = 6, dpi = 300)
library(ggiraph)
library(plotly)
gg <- ggplot(deg_results, aes(x = logFC, y = -log10(PValue),
tooltip = Gene, data_id = Gene)) +
geom_point_interactive(aes(color = FDR < 0.05)) +
scale_color_manual(values = c("black", "red")) +
theme_minimal() +
labs(title = "Interactive Volcano Plot", x = "Log2 Fold Change", y = "-Log10 P-value")
girafe(ggobj = gg, width_svg = 10, height_svg = 6)
# Get results with FDR already calculated
deg_results_full <- topTags(result, n = Inf)$table
sum(deg_results_full$FDR < 0.05)
# For plotting and summary, use the result object directly
qlf <- result  # Use the same result object
top <- rownames(topTags(qlf))
cpm(dge)[top, ]
summary(decideTests(qlf))
plotMD(qlf)
abline(h = c(-1, 1), col = "blue")
library(tidyverse)
library(readr)
library(viridis)
library(ggplot2)
library(here)
# Load the full DTE table that includes Index, Gene, and Known/Novel
dte_df <- read_tsv("transcript_DEG_summary_table.tsv")
# Define CPM columns
cpm_cols <- c("A258_Q157R_CPM", "X504_Q157R_CPM", "A309_Q157R_CPM",
"V335_WT_CPM", "V334_WT_CPM", "A310_WT_CPM")
# Create long-form CPM table with labels based on PB accession
cpm_long <- dte_df %>%
mutate(
isoform = Index,                    # PB accession
gene_name = Gene,
known_novel = `Known/Novel`
) %>%
select(gene_name, isoform, known_novel, all_of(cpm_cols)) %>%
pivot_longer(cols = all_of(cpm_cols), names_to = "Sample", values_to = "CPM") %>%
mutate(
Condition = ifelse(str_detect(Sample, "WT"), "WT", "Q157R")
)
color_set <- viridis(5)
other_color <- "gray80"
plot_top5_cpm_bar <- function(gene_query, outdir = "stacked_bar_plots_cpm") {
dir.create(outdir, showWarnings = FALSE, recursive = TRUE)
gene_data <- cpm_long %>%
filter(gene_name == gene_query) %>%
mutate(label = ifelse(known_novel == "N", paste0(isoform, "*"), isoform))
iso_counts <- gene_data %>% distinct(label) %>% nrow()
if (iso_counts <= 5) {
label_levels <- unique(gene_data$label)
iso_colors <- setNames(viridis::viridis(length(label_levels), option = "D"), label_levels)
} else {
top5 <- gene_data %>%
group_by(label) %>%
summarise(avg_cpm = mean(CPM, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(avg_cpm)) %>%
slice_head(n = 5) %>%
pull(label)
gene_data <- gene_data %>%
mutate(label = ifelse(label %in% top5, label, "Other"))
label_levels <- c(sort(unique(gene_data$label[gene_data$label != "Other"])), "Other")
iso_colors <- setNames(viridis::viridis(length(label_levels) - 1, option = "D"), label_levels[1:5])
iso_colors["Other"] <- "gray80"
}
# Per-sample CPM plot
p1 <- gene_data %>%
group_by(Sample, Condition, label) %>%
summarise(CPM = sum(CPM, na.rm = TRUE), .groups = "drop") %>%
mutate(label = factor(label, levels = label_levels)) %>%
ggplot(aes(x = Sample, y = CPM, fill = label)) +
geom_bar(stat = "identity") +
facet_wrap(~Condition, scales = "free_x") +
scale_fill_manual(values = iso_colors) +
labs(title = paste("Top Isoforms for", gene_query),
y = "CPM", x = "Sample", fill = "Transcript") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Condition-level average CPM plot
p2 <- gene_data %>%
group_by(Condition, label) %>%
summarise(mean_CPM = mean(CPM, na.rm = TRUE), .groups = "drop") %>%
mutate(label = factor(label, levels = label_levels)) %>%
ggplot(aes(x = Condition, y = mean_CPM, fill = label)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = iso_colors) +
labs(title = paste("Avg CPM by Condition for", gene_query),
y = "Average CPM", fill = "Transcript") +
theme_minimal()
ggsave(file.path(outdir, paste0(gene_query, "_cpm_barplot_samples.pdf")), plot = p1, width = 8, height = 5)
ggsave(file.path(outdir, paste0(gene_query, "_cpm_barplot_avg.pdf")), plot = p2, width = 6, height = 4.5)
print(p1)
print(p2)
}
plot_top5_cpm_bar("Ezh2")
plot_top5_cpm_bar("Tgfbr2")
plot_top5_cpm_bar("Fancl")
plot_top5_cpm_bar("Map3k7")
plot_top5_cpm_bar("Bcor")
plot_top5_cpm_bar("Irak1")
plot_top5_cpm_bar("Irak1bp1")
plot_top5_cpm_bar("Jak2")
plot_top5_cpm_bar("Gnas")
plot_top5_cpm_bar("Mtf2")
plot_top5_cpm_bar("Brca1")
plot_top5_cpm_bar("Brca2")
plot_top5_cpm_bar("Atr")
plot_top5_cpm_bar("Rb1")
# Load gene-level stats
dge_df <- read_tsv("gene_DEG_summary_table.tsv")
# Get top 50 by significance and effect size
top_genes <- dge_df %>%
mutate(abs_logFC = abs(logFC)) %>%
arrange(FDR_DEG, desc(abs_logFC)) %>%
distinct(Gene) %>%
slice_head(n = 10) %>%
pull(Gene)
# Loop and generate plots
walk(top_genes, ~{
message("Plotting: ", .x)
print(plot_top5_cpm_bar(.x))
})
dtu_df <- read_tsv("transcript_DTU_summary.tsv")
# Define fraction columns
frac_cols <- c("A258_Q157R_Frac", "X504_Q157R_Frac", "A309_Q157R_Frac",
"V335_WT_Frac", "V334_WT_Frac", "A310_WT_Frac")
# Pivot to long format and preserve PB accession and novelty info
frac_long <- dtu_df %>%
mutate(
isoform = Index,                     # PB accession
gene_name = Gene,
known_novel = `Known/Novel`
) %>%
select(gene_name, isoform, known_novel, all_of(frac_cols)) %>%
pivot_longer(cols = all_of(frac_cols), names_to = "Sample", values_to = "Frac") %>%
mutate(Condition = ifelse(str_detect(Sample, "WT"), "WT", "Q157R"))
plot_top5_frac_bar <- function(gene_query, outdir = "stacked_bar_plots_frac") {
dir.create(outdir, showWarnings = FALSE, recursive = TRUE)
# Filter and label transcripts
gene_data <- frac_long %>%
filter(gene_name == gene_query) %>%
mutate(label = ifelse(known_novel == "N", paste0(isoform, "*"), isoform))
# Join average fractional abundance from dtu_df
gene_data <- gene_data %>%
left_join(
dtu_df %>% select(Index, Gene, avg_Frac_WT, avg_Frac_Q157R),
by = c("isoform" = "Index", "gene_name" = "Gene")
)
iso_counts <- gene_data %>% distinct(label) %>% nrow()
if (iso_counts <= 5) {
label_levels <- unique(gene_data$label)
iso_colors <- setNames(viridis::viridis(length(label_levels), option = "D"), label_levels)
} else {
top5 <- gene_data %>%
group_by(label) %>%
summarise(avg_frac = mean(Frac, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(avg_frac)) %>%
slice_head(n = 5) %>%
pull(label)
gene_data <- gene_data %>%
mutate(label = ifelse(label %in% top5, label, "Other"))
label_levels <- c(sort(unique(gene_data$label[gene_data$label != "Other"])), "Other")
iso_colors <- setNames(viridis::viridis(length(label_levels) - 1, option = "D"), label_levels[1:5])
iso_colors["Other"] <- "gray80"
}
# Per-sample fractional abundance plot
p1 <- gene_data %>%
group_by(Sample, Condition, label) %>%
summarise(Frac = sum(Frac, na.rm = TRUE), .groups = "drop") %>%
mutate(label = factor(label, levels = label_levels)) %>%
ggplot(aes(x = Sample, y = Frac, fill = label)) +
geom_bar(stat = "identity") +
facet_wrap(~Condition, scales = "free_x") +
scale_fill_manual(values = iso_colors) +
labs(title = paste("Top Isoforms for", gene_query),
y = "Fractional Abundance", x = "Sample", fill = "Transcript") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Condition-level average fractional abundance
avg_data <- gene_data %>%
select(label, avg_Frac_WT, avg_Frac_Q157R) %>%
distinct() %>%
pivot_longer(cols = starts_with("avg_Frac"), names_to = "Condition", values_to = "mean_frac") %>%
mutate(
Condition = recode(Condition,
"avg_Frac_WT" = "WT",
"avg_Frac_Q157R" = "Q157R"),
label = factor(label, levels = label_levels)
)
p2 <- avg_data %>%
ggplot(aes(x = Condition, y = mean_frac, fill = label)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = iso_colors) +
labs(title = paste("Avg Fractional Abundance for", gene_query),
y = "Average Fraction", fill = "Transcript") +
theme_minimal()
ggsave(file.path(outdir, paste0(gene_query, "_frac_barplot_samples.pdf")), plot = p1, width = 8, height = 5)
ggsave(file.path(outdir, paste0(gene_query, "_frac_barplot_avg.pdf")), plot = p2, width = 6, height = 4.5)
print(p1)
print(p2)
}
plot_top5_frac_bar("Ezh2")
plot_top5_frac_bar("Tgfbr2")
plot_top5_frac_bar("Fancl")
plot_top5_frac_bar("Map3k7")
plot_top5_frac_bar("Bcor")
plot_top5_frac_bar("Irak1")
plot_top5_frac_bar("Irak1bp1")
plot_top5_frac_bar("Jak2")
plot_top5_frac_bar("Gnas")
plot_top5_frac_bar("Mtf2")
plot_top5_frac_bar("Brca1")
plot_top5_frac_bar("Brca2")
plot_top5_frac_bar("Atr")
plot_top5_frac_bar("Rb1")
# Load transcript-level DTU if needed
if (!exists("tx_dtu_df")) {
tx_dtu_df <- read_tsv("transcript_DTU_summary.tsv") %>%
mutate(row_id = make.unique(Index))
}
# Summarize gene-level DTU from transcript-level DTU
gene_dtu_df <- tx_dtu_df %>%
group_by(Gene) %>%
summarise(
lf_DTU = sum(lf_DTU, na.rm = TRUE),
adj_p.value_DTU = min(adj.p.value_DTU, na.rm = TRUE),
.groups = "drop"
)
# Get top 50 genes by significance and effect size
top_dtu_genes <- gene_dtu_df %>%
arrange(adj_p.value_DTU, desc(abs(lf_DTU))) %>%
distinct(Gene) %>%
slice_head(n = 10) %>%
pull(Gene)
# Plot top 5 DTU transcripts per gene
walk(top_dtu_genes, plot_top5_frac_bar)
